name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: airbnb-mcp-server

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run build
      run: npm run build
    
    - name: Run tests (if any)
      run: npm test --if-present

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

    - name: Create or update secret
      run: |
        if gcloud secrets describe mcp-access-tokens >/dev/null 2>&1; then
          echo "Secret exists"
        else
          echo -n "${{ secrets.MCP_ACCESS_TOKENS }}" | gcloud secrets create mcp-access-tokens --data-file=-
        fi

    - name: Deploy to Cloud Run
      run: |
        # Update the image in cloud-run.yaml
        sed -i "s|gcr.io/PROJECT_ID/airbnb-mcp-server:latest|gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA|g" cloud-run.yaml
        
        # Deploy the service
        gcloud run services replace cloud-run.yaml \
          --region=$REGION \
          --platform=managed

    - name: Make service accessible
      run: |
        gcloud run services add-iam-policy-binding $SERVICE_NAME \
          --region=$REGION \
          --member="allUsers" \
          --role="roles/run.invoker"

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
        echo "Service deployed at: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Test deployment
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Test health endpoint
        curl -f "$SERVICE_URL/health" || exit 1
        
        echo "âœ… Deployment successful and health check passed"